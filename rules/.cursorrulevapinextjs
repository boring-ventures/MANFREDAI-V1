We are building a minimalist and clean landing page using Next.js that includes a single purpose: allowing users to initiate a call with a Vapi AI assistant. The site will be deployed to Vercel. Here's the complete setup and implementation instructions:

1. PROJECT STACK
- Framework: Next.js (App Router or Pages Router is fine; using CSR only)
- Deployment: Vercel (Serverless, with edge runtime constraints)
- Styling: TailwindCSS
- AI Assistant SDK: @vapi-ai/web (browser-only)

2. FOLDER STRUCTURE
/
├── public/
│   └── favicon.ico
├── pages/
│   └── index.tsx         <-- Main UI page
├── components/
│   └── CallButton.tsx    <-- Vapi assistant button logic
├── styles/
│   └── globals.css       <-- Tailwind base styles
├── .env.local            <-- Local development environment
└── tailwind.config.js

3. INSTALL DEPENDENCIES
Run:
- npm install next react react-dom
- npm install -D tailwindcss postcss autoprefixer
- npx tailwindcss init -p
- npm install @vapi-ai/web

4. TAILWIND SETUP
In `tailwind.config.js`, set:



-content: ["./pages//*.{js,ts,jsx,tsx}", "./components//*.{js,ts,jsx,tsx}"]

go
Copiar
Editar
In `globals.css`:



-@tailwind base; @tailwind components; @tailwind utilities;

java
Copiar
Editar

5. ENV FILE (.env.local)
Define:


-NEXT_PUBLIC_VAPI_PUBLIC_KEY=your-vapi-public-key NEXT_PUBLIC_ASSISTANT_ID=your-assistant-id

Make sure to add these manually in the Vercel dashboard as well under Project Settings > Environment Variables (with NEXT_PUBLIC_ prefix).

6. COMPONENT LOGIC – CallButton.tsx
```tsx
"use client";
import { useEffect, useState } from "react";
import Vapi from "@vapi-ai/web";

export default function CallButton() {
  const [error, setError] = useState<string | null>(null);
  const [isCallActive, setIsCallActive] = useState(false);

  useEffect(() => {
    let vapi: any = null;

    if (typeof window !== "undefined") {
      vapi = new Vapi(process.env.NEXT_PUBLIC_VAPI_PUBLIC_KEY!);

      // Event handlers
      vapi.on("call-start", () => {
        setIsCallActive(true);
        console.log("Call started");
      });

      vapi.on("call-end", () => {
        setIsCallActive(false);
        console.log("Call ended");
      });

      vapi.on("error", (e: Error) => {
        setError(e.message);
        console.error("Vapi error:", e);
      });

      // Cleanup
      return () => {
        if (vapi) {
          vapi.stop();
        }
      };
    }
  }, []);

  const handleCall = async () => {
    try {
      // Request microphone permissions
      await navigator.mediaDevices.getUserMedia({ audio: true });
      
      const vapi = new Vapi(process.env.NEXT_PUBLIC_VAPI_PUBLIC_KEY!);
      await vapi.start(process.env.NEXT_PUBLIC_ASSISTANT_ID!);
    } catch (error) {
      if (error instanceof DOMException && error.name === "NotAllowedError") {
        setError("Please allow microphone access to use the voice assistant");
      } else {
        setError("Failed to start call. Please try again.");
      }
    }
  };

  return (
    <div className="flex flex-col items-center gap-4">
      <button
        onClick={handleCall}
        disabled={isCallActive}
        className={`bg-black text-white py-3 px-6 rounded-xl transition ${
          isCallActive ? 'opacity-50 cursor-not-allowed' : 'hover:scale-105'
        }`}
      >
        {isCallActive ? 'Call in Progress' : 'Call Assistant'}
      </button>
      {error && (
        <p className="text-red-500 text-sm">{error}</p>
      )}
    </div>
  );
}
```

7. LEGAL & PRIVACY REQUIREMENTS
```typescript
// Add to CallButton.tsx
const [hasConsent, setHasConsent] = useState(false);

const requestConsent = () => {
  // Show consent dialog
  const consent = window.confirm(
    "By proceeding, you agree to allow audio recording and processing. Do you consent?"
  );
  setHasConsent(consent);
  return consent;
};

const handleCall = async () => {
  if (!hasConsent && !requestConsent()) {
    return;
  }
  // ... existing call logic ...
};
```

8. PERFORMANCE OPTIMIZATIONS
```typescript
// Add to _app.tsx or layout.tsx
export const metadata = {
  themeColor: '#000000',
  viewport: 'width=device-width, initial-scale=1, maximum-scale=1',
};

// Add to CallButton.tsx
useEffect(() => {
  // Preload Vapi SDK
  const preloadVapi = () => {
    const link = document.createElement('link');
    link.rel = 'preload';
    link.as = 'script';
    link.href = 'https://cdn.vapi.ai/web/latest.js';
    document.head.appendChild(link);
  };
  
  preloadVapi();
}, []);
```

9. MAIN PAGE – index.tsx
import Head from "next/head";
import CallButton from "../components/CallButton";

export default function Home() {
  return (
    <>
      <Head>
        <title>Minimal AI Page</title>
        <meta name="description" content="Minimal Vapi landing page" />
      </Head>
      <main className="flex min-h-screen items-center justify-center bg-white">
        <CallButton />
      </main>
    </>
  );
}


-

